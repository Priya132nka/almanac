mdp




module INIT

    i : bool init false;
    [initialisation] !i -> 1.0:(i'=true);

endmodule


module SYNC

    t : bool init true;
    [initialisation] !i -> 1.0:(t' = false);
    [action] !t -> 1.0:(t' = true);
    [transition] t -> 1.0:(t' = false);

endmodule


module STATE_0

    s0 : [0..2] init 2;
    [initialisation] !i -> 0.8693115711212158:(s0'=0) + 0.13068842887878418:(s0'=1);
    [transition] true & (a0=0 & a1=0) -> ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.0*s0 + 0.0*s1))):(s0'=1) + (1.0 - ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.0*s0 + 0.0*s1)))):(s0'=0);
    [transition] true & (a0=1 & a1=0) -> ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1))):(s0'=1) + (1.0 - ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1)))):(s0'=0);
    [transition] true & (a0=2 & a1=0) -> ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.0*s0 + 0.0*s1))):(s0'=1) + (1.0 - ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.0*s0 + 0.0*s1)))):(s0'=0);
    [transition] true & (a0=3 & a1=0) -> ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1))):(s0'=1) + (1.0 - ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1)))):(s0'=0);
    [transition] true & (a0=0 & a1=1) -> ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1))):(s0'=1) + (1.0 - ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1)))):(s0'=0);
    [transition] true & (a0=1 & a1=1) -> ((1.0*s0 + 0.0*s1)/max(0.0, (1.0*s0 + 0.0*s1),(0.0*s0 + 1.0*s1))):(s0'=1) + (1.0 - ((1.0*s0 + 0.0*s1)/max(0.0, (1.0*s0 + 0.0*s1),(0.0*s0 + 1.0*s1)))):(s0'=0);
    [transition] true & (a0=2 & a1=1) -> ((1.0*s0 + 0.0*s1)/max(0.0, (1.0*s0 + 0.0*s1),(0.0*s0 + 1.0*s1))):(s0'=1) + (1.0 - ((1.0*s0 + 0.0*s1)/max(0.0, (1.0*s0 + 0.0*s1),(0.0*s0 + 1.0*s1)))):(s0'=0);
    [transition] true & (a0=3 & a1=1) -> ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1))):(s0'=1) + (1.0 - ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1)))):(s0'=0);

endmodule


module STATE_1

    s1 : [0..2] init 2;
    [initialisation] !i -> 0.8996628522872925:(s1'=0) + 0.10033714771270752:(s1'=1);
    [transition] true & (a0=0 & a1=0) -> ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.0*s0 + 0.0*s1))):(s1'=1) + (1.0 - ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.0*s0 + 0.0*s1)))):(s1'=0);
    [transition] true & (a0=1 & a1=0) -> ((0.7208037972450256*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1))):(s1'=1) + (1.0 - ((0.7208037972450256*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1)))):(s1'=0);
    [transition] true & (a0=2 & a1=0) -> ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.0*s0 + 0.0*s1))):(s1'=1) + (1.0 - ((0.0*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.0*s0 + 0.0*s1)))):(s1'=0);
    [transition] true & (a0=3 & a1=0) -> ((0.7208037972450256*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1))):(s1'=1) + (1.0 - ((0.7208037972450256*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1)))):(s1'=0);
    [transition] true & (a0=0 & a1=1) -> ((0.7208037972450256*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1))):(s1'=1) + (1.0 - ((0.7208037972450256*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1)))):(s1'=0);
    [transition] true & (a0=1 & a1=1) -> ((0.0*s0 + 1.0*s1)/max(0.0, (1.0*s0 + 0.0*s1),(0.0*s0 + 1.0*s1))):(s1'=1) + (1.0 - ((0.0*s0 + 1.0*s1)/max(0.0, (1.0*s0 + 0.0*s1),(0.0*s0 + 1.0*s1)))):(s1'=0);
    [transition] true & (a0=2 & a1=1) -> ((0.0*s0 + 1.0*s1)/max(0.0, (1.0*s0 + 0.0*s1),(0.0*s0 + 1.0*s1))):(s1'=1) + (1.0 - ((0.0*s0 + 1.0*s1)/max(0.0, (1.0*s0 + 0.0*s1),(0.0*s0 + 1.0*s1)))):(s1'=0);
    [transition] true & (a0=3 & a1=1) -> ((0.7208037972450256*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1))):(s1'=1) + (1.0 - ((0.7208037972450256*s0 + 0.0*s1)/max(0.0, (0.0*s0 + 0.0*s1),(0.7208037972450256*s0 + 0.0*s1)))):(s1'=0);

endmodule

// G ((!psi) | (F phi))
module SPEC_0

    q0 : [0..2] init 0;
    [transition] q0=0 & !phi & !psi -> 1.0:(q0'=0);
    [transition] q0=0 & phi & !psi -> 1.0:(q0'=0);
    [transition] q0=0 & !phi & psi -> 1.0:(q0'=1);
    [transition] q0=0 & phi & psi -> 1.0:(q0'=0);
    [transition] q0=1 & !phi & !psi -> 1.0:(q0'=1);
    [transition] q0=1 & phi & !psi -> 1.0:(q0'=0);
    [transition] q0=1 & !phi & psi -> 1.0:(q0'=1);
    [transition] q0=1 & phi & psi -> 1.0:(q0'=0);
    [transition] q0=2 & !phi & !psi -> 1.0:(q0'=2);
    [transition] q0=2 & phi & !psi -> 1.0:(q0'=2);
    [transition] q0=2 & !phi & psi -> 1.0:(q0'=2);
    [transition] q0=2 & phi & psi -> 1.0:(q0'=2);

endmodule

// G F psi
module SPEC_1

    q1 : [0..1] init 0;
    [transition] q1=0 & !psi -> 1.0:(q1'=0);
    [transition] q1=0 & psi -> 1.0:(q1'=0);
    [transition] q1=1 & !psi -> 1.0:(q1'=1);
    [transition] q1=1 & psi -> 1.0:(q1'=1);

endmodule


module ACTION_0

    a0 : [-1..3] init -1;
    [action] true -> 1.0:(a0'=0);
    [action] true -> 1.0:(a0'=1);
    [action] true -> 1.0:(a0'=2);
    [action] true -> 1.0:(a0'=3);

endmodule


module ACTION_1

    a1 : [-1..3] init -1;
    [action] true -> 1.0:(a1'=0);
    [action] true -> 1.0:(a1'=1);

endmodule


formula phi = ((s0 = 1 & s1 = 1));
label "phi" = phi;
formula psi = ((s1 = 1));
label "psi" = psi;
formula chi = ((s0 = 1));
label "chi" = chi;
formula xi = ((s0 = 1));
label "xi" = xi;